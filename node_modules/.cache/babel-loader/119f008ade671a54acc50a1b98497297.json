{"ast":null,"code":"var _jsxFileName = \"/home/cpeterson/webdev/udemy/modernReact/hangman/src/Hangman.js\";\nimport React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\nimport { randomWord } from './words.js';\n\nclass Hangman extends Component {\n  /** by default, allow 6 guesses and use provided gallows images. */\n  constructor(props) {\n    super(props);\n    this.state = {\n      nWrong: 0,\n      guessed: new Set(),\n      answer: randomWord()\n    };\n    this.handleGuess = this.handleGuess.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  reset() {\n    this.setState({\n      nWrong: 0,\n      guessed: new Set(),\n      answer: randomWord()\n    });\n  }\n  /** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n\n\n  guessedWord() {\n    return this.state.answer.split(\"\").map(ltr => this.state.guessed.has(ltr) ? ltr : \"_\");\n  }\n  /** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n\n\n  handleGuess(evt) {\n    let ltr = evt.target.value;\n    this.setState(st => ({\n      guessed: st.guessed.add(ltr),\n      nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n    }));\n  }\n  /** generateButtons: return array of letter buttons to render */\n\n\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(ltr => React.createElement(\"button\", {\n      key: ltr,\n      value: ltr,\n      onClick: this.handleGuess,\n      disabled: this.state.guessed.has(ltr),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, ltr));\n  }\n  /** render: render game */\n\n\n  render() {\n    const gameOver = this.state.nWrong >= this.props.maxWrong;\n    const altText = `${this.state.nWrong}/${this.props.maxWrong} guesses`;\n    return React.createElement(\"div\", {\n      className: \"Hangman\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Hangman\"), React.createElement(\"img\", {\n      src: this.props.images[this.state.nWrong],\n      alt: altText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Guessed Wrong: \", this.state.nWrong), React.createElement(\"p\", {\n      className: \"Hangman-word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, !gameOver ? this.guessedWord() : this.state.answer), React.createElement(\"p\", {\n      className: \"Hangman-btns\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, !gameOver ? this.generateButtons() : 'You Lost'), this.guessedWord().join(\"\") === this.state.answer && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"You Win!\"), React.createElement(\"button\", {\n      id: \"reset\",\n      onClick: this.reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Restart\"));\n  }\n\n}\n\nHangman.defaultProps = {\n  maxWrong: 6,\n  images: [img0, img1, img2, img3, img4, img5, img6]\n};\nexport default Hangman;","map":{"version":3,"sources":["/home/cpeterson/webdev/udemy/modernReact/hangman/src/Hangman.js"],"names":["React","Component","img0","img1","img2","img3","img4","img5","img6","randomWord","Hangman","constructor","props","state","nWrong","guessed","Set","answer","handleGuess","bind","reset","setState","guessedWord","split","map","ltr","has","evt","target","value","st","add","includes","generateButtons","render","gameOver","maxWrong","altText","images","join","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\nimport { randomWord } from './words.js';\n\nclass Hangman extends Component {\n  /** by default, allow 6 guesses and use provided gallows images. */\n  static defaultProps = {\n    maxWrong: 6,\n    images: [img0, img1, img2, img3, img4, img5, img6]\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { nWrong: 0, guessed: new Set(), answer: randomWord() };\n    this.handleGuess = this.handleGuess.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  reset () {\n    this.setState({\n      nWrong: 0,\n      guessed: new Set(),\n      answer: randomWord()\n    })\n  }\n\n  /** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n  guessedWord() {\n    return this.state.answer\n      .split(\"\")\n      .map(ltr => (this.state.guessed.has(ltr) ? ltr : \"_\"));\n  }\n\n  /** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n  handleGuess(evt) {\n    let ltr = evt.target.value;\n    this.setState(st => ({\n      guessed: st.guessed.add(ltr),\n      nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n    }));\n  }\n\n  /** generateButtons: return array of letter buttons to render */\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(ltr => (\n      <button\n        key={ltr}\n        value={ltr}\n        onClick={this.handleGuess}\n        disabled={this.state.guessed.has(ltr)}\n      >\n        {ltr}\n      </button>\n    ));\n  }\n\n  /** render: render game */\n  render() {\n    const gameOver = this.state.nWrong >= this.props.maxWrong;\n    const altText = `${this.state.nWrong}/${this.props.maxWrong} guesses`;\n    return (\n      <div className='Hangman'>\n        <h1>Hangman</h1>\n        <img src={this.props.images[this.state.nWrong]} alt={altText}/>\n        <p>Guessed Wrong: {this.state.nWrong}</p>\n        <p className='Hangman-word'>\n          {!gameOver ? this.guessedWord() : this.state.answer}\n        </p>\n        <p className='Hangman-btns'>\n          {!gameOver\n          ? this.generateButtons()\n          : 'You Lost'\n          }\n        </p>\n        {this.guessedWord().join(\"\") === this.state.answer && <p>You Win!</p>}\n        <button id='reset' onClick={this.reset}>Restart</button>\n      </div>\n    );\n  }\n}\n\nexport default Hangman;\n"]},"metadata":{},"sourceType":"module"}