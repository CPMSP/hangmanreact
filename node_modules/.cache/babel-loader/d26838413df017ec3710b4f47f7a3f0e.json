{"ast":null,"code":"import _classCallCheck from\"/home/cpmsp/webdev/udemy/modernReact/projects/hangman/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/cpmsp/webdev/udemy/modernReact/projects/hangman/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/cpmsp/webdev/udemy/modernReact/projects/hangman/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/cpmsp/webdev/udemy/modernReact/projects/hangman/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/home/cpmsp/webdev/udemy/modernReact/projects/hangman/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/cpmsp/webdev/udemy/modernReact/projects/hangman/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import\"./Hangman.css\";import img0 from\"./0.jpg\";import img1 from\"./1.jpg\";import img2 from\"./2.jpg\";import img3 from\"./3.jpg\";import img4 from\"./4.jpg\";import img5 from\"./5.jpg\";import img6 from\"./6.jpg\";import{randomWord}from'./words.js';var Hangman=/*#__PURE__*/function(_Component){_inherits(Hangman,_Component);/** by default, allow 6 guesses and use provided gallows images. */function Hangman(props){var _this;_classCallCheck(this,Hangman);_this=_possibleConstructorReturn(this,_getPrototypeOf(Hangman).call(this,props));_this.state={nWrong:0,guessed:new Set(),answer:randomWord()};_this.handleGuess=_this.handleGuess.bind(_assertThisInitialized(_this));_this.reset=_this.reset.bind(_assertThisInitialized(_this));return _this;}_createClass(Hangman,[{key:\"reset\",value:function reset(){this.setState({nWrong:0,guessed:new Set(),answer:randomWord()});}/** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */},{key:\"guessedWord\",value:function guessedWord(){var _this2=this;return this.state.answer.split(\"\").map(function(ltr){return _this2.state.guessed.has(ltr)?ltr:\"_\";});}/** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */},{key:\"handleGuess\",value:function handleGuess(evt){var ltr=evt.target.value;this.setState(function(st){return{guessed:st.guessed.add(ltr),nWrong:st.nWrong+(st.answer.includes(ltr)?0:1)};});}/** generateButtons: return array of letter buttons to render */},{key:\"generateButtons\",value:function generateButtons(){var _this3=this;return\"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(function(ltr){return React.createElement(\"button\",{key:ltr,value:ltr,onClick:_this3.handleGuess,disabled:_this3.state.guessed.has(ltr)},ltr);});}/** render: render game */},{key:\"render\",value:function render(){var gameOver=this.state.nWrong>=this.props.maxWrong;var isWinner=this.guessedWord().join(\"\")===this.state.answer;var altText=\"\".concat(this.state.nWrong,\"/\").concat(this.props.maxWrong,\" guesses\");var gameState=this.generateButtons();if(isWinner)gameState=\"You Win!!\";if(gameOver)gameState=\"You Lost\";return React.createElement(\"div\",{className:\"Hangman\"},React.createElement(\"h1\",null,\"Hangman\"),React.createElement(\"img\",{src:this.props.images[this.state.nWrong],alt:altText}),React.createElement(\"p\",null,\"Guessed Wrong: \",this.state.nWrong),React.createElement(\"p\",{className:\"Hangman-word\"},!gameOver?this.guessedWord():this.state.answer),React.createElement(\"p\",{className:\"Hangman-btns\"},gameState),React.createElement(\"button\",{id:\"reset\",onClick:this.reset},\"Restart\"));}}]);return Hangman;}(Component);Hangman.defaultProps={maxWrong:6,images:[img0,img1,img2,img3,img4,img5,img6]};export default Hangman;","map":{"version":3,"sources":["/home/cpmsp/webdev/udemy/modernReact/projects/hangman/src/Hangman.js"],"names":["React","Component","img0","img1","img2","img3","img4","img5","img6","randomWord","Hangman","props","state","nWrong","guessed","Set","answer","handleGuess","bind","reset","setState","split","map","ltr","has","evt","target","value","st","add","includes","gameOver","maxWrong","isWinner","guessedWord","join","altText","gameState","generateButtons","images","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\nimport { randomWord } from './words.js';\n\nclass Hangman extends Component {\n  /** by default, allow 6 guesses and use provided gallows images. */\n  static defaultProps = {\n    maxWrong: 6,\n    images: [img0, img1, img2, img3, img4, img5, img6]\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { nWrong: 0, guessed: new Set(), answer: randomWord() };\n    this.handleGuess = this.handleGuess.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  reset () {\n    this.setState({\n      nWrong: 0,\n      guessed: new Set(),\n      answer: randomWord()\n    })\n  }\n\n  /** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n  guessedWord() {\n    return this.state.answer\n      .split(\"\")\n      .map(ltr => (this.state.guessed.has(ltr) ? ltr : \"_\"));\n  }\n\n  /** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n  handleGuess(evt) {\n    let ltr = evt.target.value;\n    this.setState(st => ({\n      guessed: st.guessed.add(ltr),\n      nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n    }));\n  }\n\n  /** generateButtons: return array of letter buttons to render */\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(ltr => (\n      <button\n        key={ltr}\n        value={ltr}\n        onClick={this.handleGuess}\n        disabled={this.state.guessed.has(ltr)}\n      >\n        {ltr}\n      </button>\n    ));\n  }\n\n  /** render: render game */\n  render() {\n    const gameOver = this.state.nWrong >= this.props.maxWrong;\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer; \n    const altText = `${this.state.nWrong}/${this.props.maxWrong} guesses`;\n    let gameState = this.generateButtons();\n    if (isWinner) gameState = \"You Win!!\";\n    if (gameOver) gameState = \"You Lost\";\n    return (\n      <div className='Hangman'>\n        <h1>Hangman</h1>\n        <img src={this.props.images[this.state.nWrong]} alt={altText}/>\n        <p>Guessed Wrong: {this.state.nWrong}</p>\n        <p className='Hangman-word'>\n          {!gameOver ? this.guessedWord() : this.state.answer}\n        </p>\n        <p className='Hangman-btns'>{gameState}</p>\n        <button id='reset' onClick={this.reset}>Restart</button>\n      </div>\n    );\n  }\n}\n\nexport default Hangman;\n"]},"metadata":{},"sourceType":"module"}